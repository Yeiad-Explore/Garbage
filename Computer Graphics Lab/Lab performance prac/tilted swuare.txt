#include <GL/glut.h> // GLUT, include glu.h and gl.h

/* Initialize OpenGL Graphics */
void initGL() {
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f); // Set background color to black and opaque
    glMatrixMode(GL_PROJECTION); // Select the Projection matrix for operation
    glLoadIdentity();            // Reset Projection matrix
    gluOrtho2D(-10.0, 10.0, -10.0, 10.0); // Set an orthographic projection
}

/* Function to draw a square */
void drawSquare(float x, float y, float size) {
    glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
    glVertex2f(x - size / 2, y - size / 2); // Bottom Left
    glVertex2f(x + size / 2, y - size / 2); // Bottom Right
    glVertex2f(x + size / 2, y + size / 2); // Top Right
    glVertex2f(x - size / 2, y + size / 2); // Top Left
    glEnd();
}

/* Window repaint event handler */
void display() {
    glClear(GL_COLOR_BUFFER_BIT);   // Clear the color buffer with current clearing color

    // Draw first square (non-tilted)
    glColor3f(1.0f, 0.0f, 0.0f); // Red color
    drawSquare(0.0f, 0.0f, 5.0f); // Center (0,0) with size 5

    // Apply rotation to draw the tilted square
    glPushMatrix();               // Save the current transformation matrix
    glRotatef(45.0f, 0.0f, 0.0f, 1.0f); // Rotate about the z-axis

    // Draw second square (tilted)
    glColor3f(0.0f, 1.0f, 0.0f); // Green color
    drawSquare(0.0f, 0.0f, 5.0f); // Center (0,0) with size 5

    glPopMatrix();                // Restore the transformation matrix

    glFlush();  // Render now
}

/* Main function: GLUT runs as a console application starting at main() */
int main(int argc, char** argv) {
    glutInit(&argc, argv);                 // Initialize GLUT
    glutCreateWindow("OpenGL Squares");    // Create a window with the given title
    glutInitWindowSize(320, 320);          // Set the window's initial width & height
    glutDisplayFunc(display);              // Register display callback handler for window re-paint
    initGL();                              // Our own OpenGL initialization
    glutMainLoop();                        // Enter the event-processing loop
    return 0;
}
